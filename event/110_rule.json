[
  {
    "@type": "d",
    "@rid": "#17:4",
    "@version": 1,
    "@class": "Event",
    "eventId": 10005,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic class GetBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfn(\"blog\", objects);\n    }\n\n    /*\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> blogMap = ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // determine if the current user can post.\n        boolean allowPost = false;\n        String host = (String)data.get(\"host\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                allowPost = true;\n            } else if(roles.contains(\"admin\") || roles.contains(\"blowAdmin\") || roles.contains(\"blogUser\")){\n                if(host.equals(user.get(\"host\"))) {\n                    allowPost = true;\n                }\n            }\n        }\n\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            refreshCache(host);\n            newList = (List)blogMap.get(host + \"newList\");\n        }\n        // get the page from cache.\n        long total = newList.size();\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(total > 0) {\n            List<Map<String, Object>> blogs = new ArrayList<Map<String, Object>>();\n\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, newList.size()); i++) {\n                String rid = newList.get(i);\n                String json = getJsonByRid(rid);\n                Map<String, Object> blog = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                // convert tags value from map to string.\n                Map tags = (Map)blog.get(\"tags\");\n                if(tags != null && tags.size() > 0) {\n                    String s = String.join(\",\", tags.keySet());\n                    blog.put(\"tags\", s);\n                }\n\n                blogs.add(blog);\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"blogs\", blogs);\n            result.put(\"allowPost\", allowPost);\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n            result.put(\"hosts\", hosts);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no blog available. but still need to return allowPost and hosts\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowPost\", allowPost);\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n            result.put(\"hosts\", hosts);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n    */\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogRule",
      "createDate": "2015-03-08T18:18:18.253"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.253",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:5",
    "@version": 1,
    "@class": "Event",
    "eventId": 10006,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetBlogDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnDropdown(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogDropdownRule",
      "createDate": "2015-03-08T18:18:18.282"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.282",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:6",
    "@version": 1,
    "@class": "Event",
    "eventId": 10007,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/10/2014.\n */\npublic class UpdBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfnEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdBlogEvRule",
      "createDate": "2015-03-08T18:18:18.293"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.293",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:7",
    "@version": 1,
    "@class": "Event",
    "eventId": 10008,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/10/2014.\n */\npublic class UpdBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfn(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdBlogRule",
      "createDate": "2015-03-08T18:18:18.320"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.320",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:8",
    "@version": 1,
    "@class": "Event",
    "eventId": 10009,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic class DelBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelBlogEvRule",
      "createDate": "2015-03-08T18:18:18.336"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.336",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetBlogTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnTree(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogTreeRule",
      "createDate": "2015-03-08T18:18:18.356"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.356",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic abstract class AbstractBlogRule extends AbstractRule implements Rule {\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n    /*\n    protected String getJsonByRid(String blogRid) {\n        // try to get it from cache first.\n        String json = null;\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"blogRid\");\n        }\n        if(json == null) {\n            // TODO warning to increase cache if this happens.\n            json = DbService.getJsonByRid(blogRid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    blogMap.put(\"cache\", cache);\n                }\n                cache.put(blogRid, json);\n            }\n        }\n        return json;\n    }\n\n    protected Map<String, Object> getBlogByHostTitle(String host, String title) {\n        Map<String, Object> map = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostTitleIdx = db.getMetadata().getIndexManager().getIndex(\"hostTitleIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, title);\n            OIdentifiable blog = (OIdentifiable) hostTitleIdx.get(key);\n            if (blog != null) {\n                String json = ((ODocument) blog.getRecord()).toJSON();\n                map = mapper.readValue(json, new TypeReference<HashMap<String, Object>>() {});\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return map;\n    }\n\n    protected ODocument addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"id\", data.get(\"id\"));\n            if(data.get(\"desc\") != null) blog.field(\"desc\", data.get(\"desc\"));\n            if(data.get(\"attributes\") != null) blog.field(\"attributes\", data.get(\"attributes\"));\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            if(data.get(\"parent\") != null) {\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                OIdentifiable parentOid = (OIdentifiable) blogHostIdIdx.get(parentKey);\n                if(parentOid != null) {\n                    ODocument parent = (ODocument)parentOid.getRecord();\n                    blog.field(\"parent\", parent);\n                    // update parent with the children\n                    Set children = parent.field(\"children\");\n                    if(children != null) {\n                        children.add(blog);\n                    } else {\n                        children = new HashSet<ODocument>();\n                        children.add(blog);\n                        parent.field(\"children\", children);\n                    }\n                    parent.save();\n                }\n            }\n            // children\n            List<String> childrenIds = (List<String>)data.get(\"children\");\n            if(childrenIds != null) {\n                Set children = new HashSet<ODocument>();\n                for(String childId: childrenIds) {\n                    OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), childId);\n                    OIdentifiable childOid = (OIdentifiable) blogHostIdIdx.get(childKey);\n                    if(childOid != null) {\n                        ODocument child = (ODocument)childOid.getRecord();\n                        children.add(child);\n                        child.field(\"parent\", blog);\n                        child.save();\n                    }\n                }\n                blog.field(\"children\", children);\n            }\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n    /*\n    protected void addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = addBlogDb(data);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            newList.add(blog.field(\"@rid\").toString());\n            blogMap.put(host + \"newList\", newList);\n        } else {\n            newList.add(0, blog.field(\"@rid\").toString());  // add the head of the list.\n        }\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected ODocument addBlogDb(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n\n        try {\n            db.begin();\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"title\", data.get(\"title\"));\n            blog.field(\"source\", data.get(\"source\"));\n            blog.field(\"summary\", data.get(\"summary\"));\n            blog.field(\"content\", data.get(\"content\"));\n            blog.field(\"rank\", 0);\n            java.util.Date d = new java.util.Date();\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"updateDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            blog.save();\n            db.commit();\n            Map<String, Object> tagMap = new HashMap<String, Object>();\n\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            String host = blog.field(\"host\");\n            String className = blog.field(\"@class\");\n            for(String tagName: inputTags) {\n                ODocument tag = null;\n\n                // get the tag is it exists\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                // this is a unique index, so it retrieves a OIdentifiable\n                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                if (oIdentifiable != null) {\n                    tag = (ODocument) oIdentifiable.getRecord();\n                    Set links = tag.field(\"links\");\n                    links.add(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                } else {\n                    tag = new ODocument(schema.getClass(\"Tag\"));\n                    tag.field(\"host\", host);\n                    tag.field(\"name\", tagName);\n                    tag.field(\"class\", className);\n                    tag.field(\"createDate\", data.get(\"createDate\"));\n                    tag.field(\"createUserId\", data.get(\"createUserId\"));\n                    Set links = new HashSet<String>();\n                    links.add(blog.field(\"@rid\"));\n                    tag.field(\"links\", links);\n                    tag.save();\n                    db.commit();\n                }\n                tagMap.put(tagName, tag.field(\"@rid\"));\n            }\n            blog.field(\"tags\", tagMap);\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n    /*\n    protected boolean delBlog(Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"id\"));\n            OIdentifiable oid = (OIdentifiable) blogHostIdIdx.get(key);\n            if (oid != null) {\n                ODocument blog = (ODocument) oid.getRecord();\n                // update references from parent and children\n                ODocument parent = blog.field(\"parent\");\n                if(parent != null) {\n                    Set children = parent.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        children.remove(blog);\n                    }\n                    parent.save();\n                }\n                Set<ODocument> children = blog.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    for(ODocument child: children) {\n                        if(child != null) {\n                            child.removeField(\"parent\");\n                            child.save();\n                        }\n\n                    }\n                }\n                blog.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected void delBlogUpdCache(String blogRid, String host) throws Exception {\n        delBlogDb(blogRid);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(blogRid);\n        }\n        // update newList\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList != null) {\n            newList.remove(blogRid);\n        }\n\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected boolean delBlogDb(String blogRid) throws Exception {\n        boolean result = false;\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            // remove the tags\n            Map<String, Object> tagMap = blog.field(\"tags\");\n            if(tagMap != null) {\n                Iterator it = tagMap.entrySet().iterator();\n                while(it.hasNext()) {\n                    Map.Entry pairs = (Map.Entry)it.next();\n                    ODocument tag = db.load((ORecordId)pairs.getValue());\n                    Set links = tag.field(\"links\");\n                    links.remove(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                }\n            }\n            db.delete(new ORecordId(blogRid));\n            db.commit();\n            result = true;\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected int delBlogByHost(String host) throws Exception {\n        int recordsUpdated = 0;\n        String sql = \"DELETE FROM Blog WHERE host = '\" + host + \"'\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            recordsUpdated = db.command(new OCommandSQL(sql)).execute();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        if(recordsUpdated > 0) {\n            // clean the cache if any.\n            Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n            blogMap.remove(host + \"newList\");\n            // cached blog will be remove the cache automatically.\n        }\n        return recordsUpdated;\n    }\n    */\n    /*\n    protected void updBlog(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = updBlogDb(data, userRid, userId);\n        String blogRid = blog.field(\"@rid\").toString();\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blogRid, blog.toJSON());\n\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            blogMap.put(host + \"newList\", newList);\n            newList.add(blogRid);\n        } else {\n            newList.remove(blogRid);\n            newList.add(0, blogRid);\n        }\n        // TODO build hot list\n\n    }\n\n    protected ODocument updBlogDb(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId((String)data.get(\"@rid\")));\n            if (blog != null) {\n                String title = (String)data.get(\"title\");\n                if(title != null && !title.equals(blog.field(\"title\"))) {\n                    blog.field(\"title\", title);\n                }\n                String source = (String)data.get(\"source\");\n                if(source != null && !source.equals(blog.field(\"source\"))) {\n                    blog.field(\"source\", source);\n                }\n                String summary = (String)data.get(\"summary\");\n                if(summary != null && !summary.equals(blog.field(\"content\"))) {\n                    blog.field(\"summary\", summary);\n                }\n                String content = (String)data.get(\"content\");\n                if(content != null && !content.equals(blog.field(\"content\"))) {\n                    blog.field(\"content\", content);\n                }\n\n                // update tags\n                String host = blog.field(\"host\");\n                String className = blog.field(\"@class\");\n                Map<String, Object> tagMap = blog.field(\"tags\");\n                if(tagMap != null && tagMap.size() > 0) {\n                    // There are existing tags.\n                    if(data.get(\"tags\") != null) {\n                        // both are not null, we need a comparison to figure out what to do.\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        Set<String> storedTags = tagMap.keySet();\n                        Set<String> addSet = new HashSet<String>(inputTags);\n                        Set<String> delSet = new HashSet<String>(storedTags);\n                        addSet.removeAll(storedTags);\n                        if(addSet.size() > 0) {\n                            for(String tagName: addSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                } else {\n                                    tag = new ODocument(schema.getClass(\"Tag\"));\n                                    tag.field(\"host\", host);\n                                    tag.field(\"name\", tagName);\n                                    tag.field(\"class\", className);\n                                    tag.field(\"createDate\", new java.util.Date());\n                                    tag.field(\"createUserRid\", new ORecordId(userRid));\n                                    Set links = new HashSet<Object>();\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.field(\"links\", links);\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.put(tagName, tag.field(\"@rid\"));\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                        delSet.removeAll(inputTags);\n                        if(delSet.size() > 0) {\n                            // remove the tags\n                            for(String tagName: delSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.remove(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.remove(tagName);\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                    } else {\n                        // remove the blog reference from all tags as input is empty but stored has values.\n                        // and then remove the tags from blog.\n                        Iterator it = tagMap.entrySet().iterator();\n                        while(it.hasNext()) {\n                            ORecordId tagRid = (ORecordId)it.next();\n                            ODocument tag = db.load(tagRid);\n                            Set links = tag.field(\"links\");\n                            links.remove(blog.field(\"@rid\"));\n                            tag.save();\n                        }\n                        blog.removeField(\"tags\");\n                        blog.save();\n                        db.commit();\n                    }\n                } else {\n                    // tagMap is null\n                    if(data.get(\"tags\") != null) {\n                        tagMap = new HashMap<String, Object>();\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        for(String tagName: inputTags) {\n                            ODocument tag = null;\n                            // get the tag if it exists\n                            OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                            // this is a unique index, so it retrieves a OIdentifiable\n                            OCompositeKey key = new OCompositeKey(host, tagName, className);\n                            OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                            if (oIdentifiable != null) {\n                                tag = (ODocument) oIdentifiable.getRecord();\n                                Set links = tag.field(\"links\");\n                                links.add(blog.field(\"@rid\"));\n                                tag.save();\n                                db.commit();\n                            } else {\n                                tag = new ODocument(schema.getClass(\"Tag\"));\n                                tag.field(\"host\", host);\n                                tag.field(\"name\", tagName);\n                                tag.field(\"class\", className);\n                                tag.field(\"createDate\", new java.util.Date());\n                                tag.field(\"createUserRid\", new ORecordId(userRid));\n                                Set links = new HashSet<String>();\n                                links.add(blog.field(\"@rid\"));\n                                tag.field(\"links\", links);\n                                tag.save();\n                                db.commit();\n                            }\n                            tagMap.put(tagName, tag.field(\"@rid\"));\n                        }\n                        blog.field(\"tags\", tagMap);\n                        blog.save();\n                        db.commit();\n                    }\n                }\n                blog.field(\"updateDate\", new java.util.Date());\n                blog.field(\"updateUserId\", userId);\n                blog.field(\"updateUserRid\", userRid);\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    protected long getTotalNumberBlogFromDb(Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) as count FROM Blog\");\n\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            total = ((ODocument)db.query(new OSQLSynchQuery<ODocument>(sql.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return total;\n    }\n\n    protected List<Map<String, Object>> searchBlogFromDb(Map<String, Object> criteria) {\n        List<Map<String,Object>> list = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            List<ODocument> result = db.command(query).execute();\n            if(result.size() > 0) {\n                String json = OJSONWriter.listToJSON(result, null);\n                list = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return list;\n    }\n    protected List<ODocument> searchBlogDb(Map<String, Object> criteria) {\n        List<ODocument> blogs = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            blogs = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return blogs;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> blogs = searchBlogDb(criteria);\n        List<String> newList = new ArrayList<String>();\n        // build new map/list\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument blog : blogs) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n            }\n            newList.add(blog.field(\"@rid\").toString());\n        }\n        blogMap.put(host + \"newList\", newList);\n\n        // TODO build hot list\n        return blogMap;\n    }\n\n    protected ODocument upVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet == null) {\n                    upSet = new HashSet<String>();\n                    upSet.add(new ORecordId(userRid));\n                    blog.field(\"upUsers\", upSet);\n                } else {\n                    upSet.add(new ORecordId(userRid));\n                }\n                // remove the user from downUsers if it is there\n                // blindly remove\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet != null) {\n                    downSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n    protected ODocument downVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet == null) {\n                    downSet = new HashSet<String>();\n                    downSet.add(new ORecordId(userRid));\n                    blog.field(\"downUsers\", downSet);\n                } else {\n                    downSet.add(new ORecordId(userRid));\n                }\n                // remove the user from upUsers if it is there\n                // blindly remove\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet != null) {\n                    upSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AbstractBlogRule",
      "createDate": "2015-03-08T18:18:18.388"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.388",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:11",
    "@version": 1,
    "@class": "Event",
    "eventId": 10012,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic class DelBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfn(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelBlogRule",
      "createDate": "2015-03-08T18:18:18.417"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.417",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:12",
    "@version": 1,
    "@class": "Event",
    "eventId": 10013,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class DownBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBfn(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DownBlogRule",
      "createDate": "2015-03-08T18:18:18.430"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.430",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class DownBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DownBlogEvRule",
      "createDate": "2015-03-08T18:18:18.440"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.440",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:14",
    "@version": 1,
    "@class": "Event",
    "eventId": 10015,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class UpBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBfnEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpBlogEvRule",
      "createDate": "2015-03-08T18:18:18.461"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.461",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:15",
    "@version": 1,
    "@class": "Event",
    "eventId": 10016,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfn(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddBlogRule",
      "createDate": "2015-03-08T18:18:18.480"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.480",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:16",
    "@version": 1,
    "@class": "Event",
    "eventId": 10017,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetBlogPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogPostRule",
      "createDate": "2015-03-08T18:18:18.503"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.503",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:17",
    "@version": 1,
    "@class": "Event",
    "eventId": 10018,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfnEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddBlogEvRule",
      "createDate": "2015-03-08T18:18:18.521"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.521",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:18",
    "@version": 1,
    "@class": "Event",
    "eventId": 10019,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddPostEvRule",
      "createDate": "2015-03-08T18:18:18.534"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.534",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:19",
    "@version": 1,
    "@class": "Event",
    "eventId": 10020,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class UpBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBfn(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpBlogRule",
      "createDate": "2015-03-08T18:18:18.547"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.547",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:20",
    "@version": 1,
    "@class": "Event",
    "eventId": 10021,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddPostRule",
      "createDate": "2015-03-08T18:18:18.559"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.559",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:21",
    "@version": 1,
    "@class": "Event",
    "eventId": 10022,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule;\n\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\n/**\n * Created by steve on 28/12/14.\n * This the abstract class that implements functions for Blog, Forum and News as\n * they share similar traits. Since ids are generated and there is no need to check\n * uniqueness. Just make sure parent and children are checked and converted to ids.\n *\n */\npublic abstract class AbstractBfnRule  extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractBfnRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addBfn (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String bfnId = (String) data.get(bfnType + \"Id\");\n        String host = (String) data.get(\"host\");\n        String id = bfnType + \"Id\";\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only add \" + bfnType + \" from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                ODocument bfn = getODocumentByHostId(graph, bfnType + \"HostIdIdx\", host, bfnId);\n                if(bfn != null) {\n                    error = \"Id \" + bfnId + \" exists on host \" + host;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // make sure parent exists if it is not empty.\n                    List<String> parentRids = (List<String>)data.get(\"in_Own\");\n                    if(parentRids != null && parentRids.size() == 1) {\n                        Vertex parent = DbService.getVertexByRid(graph, parentRids.get(0));\n                        if(parent == null) {\n                            error = \"Parent with @rid \" + parentRids.get(0) + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            // convert parent from @rid to id\n                            List in_Own = new ArrayList();\n                            in_Own.add(parent.getProperty(id));\n                            eventData.put(\"in_Own\", in_Own);\n                        }\n                    }\n                    if(error == null) {\n                        // make sure all children exist if there are any.\n                        // and make sure all children have empty parent.\n                        List<String> childrenRids = (List<String>)data.get(\"out_Own\");\n                        if(childrenRids != null && childrenRids.size() > 0) {\n                            List<String> out_Own = new ArrayList<String>();\n                            for(String childRid: childrenRids) {\n                                if(childRid != null) {\n                                    if(parentRids!= null && childRid.equals(parentRids.get(0))) {\n                                        error = \"Parent shows up in the Children list\";\n                                        inputMap.put(\"responseCode\", 400);\n                                        break;\n                                    }\n                                    Vertex child = DbService.getVertexByRid(graph, childRid);\n                                    if(child == null) {\n                                        error = \"Child with @rid \" + childRid + \" cannot be found.\";\n                                        inputMap.put(\"responseCode\", 404);\n                                        break;\n                                    } else {\n                                        out_Own.add((String)child.getProperty(bfnType + \"Id\"));\n                                    }\n                                }\n                            }\n                            eventData.put(\"out_Own\", out_Own);\n                        }\n                    }\n                    if(error == null) {\n                        eventMap.put(id, HashUtil.generateUUID());\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean addBfnEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addBfnDb(bfnType, data);\n        return true;\n    }\n\n    protected void addBfnDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String host = (String)data.get(\"host\");\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> parentIds = (List<String>)data.remove(\"in_Own\");\n            List<String> childrenIds = (List<String>)data.remove(\"out_Own\");\n            OrientVertex bfn = graph.addVertex(\"class:\" + className, data);\n            createUser.addEdge(\"Create\", bfn);\n            // parent\n            if(parentIds != null && parentIds.size() == 1) {\n                OrientVertex parent = getBfnByHostId(graph, bfnType, host, parentIds.get(0));\n                if(parent != null) {\n                    parent.addEdge(\"Own\", bfn);\n                }\n            }\n            // children\n            if(childrenIds != null) {\n                for(String childId: childrenIds) {\n                    OrientVertex child = getBfnByHostId(graph, bfnType, host, childId);\n                    if(child != null) {\n                        bfn.addEdge(\"Own\", child);\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delBfn (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                error = \"You can only delete \" + bfnType + \" from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                Vertex bfn = DbService.getVertexByRid(graph, rid);\n                if(bfn != null) {\n                    // Do no check if there are any children for the bfn. Just delete it. The edge\n                    // will be deleted automatically and children can be linked to other bfn later.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    String id = bfnType + \"Id\";\n                    eventData.put(id, bfn.getProperty(id));\n                } else {\n                    error = \"@rid \" + rid + \" doesn't exist on host \" + host;\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean delBfnEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delBfnDb(bfnType, data);\n        return true;\n    }\n\n    protected void delBfnDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex bfn = getBfnByHostId(graph, bfnType, (String)data.get(\"host\"), (String)data.get(id));\n            if(bfn != null) {\n                graph.removeVertex(bfn);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updBfn (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = bfnType + \"Id\";\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                inputMap.put(\"error\", \"You can only update \" + bfnType + \" from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            } else {\n                Vertex bfn = DbService.getVertexByRid(graph, rid);\n                if(bfn != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n\n                    // make sure parent exists if it is not empty.\n                    List parentRids = (List)data.get(\"in_Own\");\n                    if(parentRids != null) {\n                        if(rid.equals(parentRids.get(0))) {\n                            inputMap.put(\"error\", \"parent @rid is the same as current @rid\");\n                            inputMap.put(\"responseCode\", 400);\n                            return false;\n                        }\n                        Vertex parent = DbService.getVertexByRid(graph, (String)parentRids.get(0));\n                        if(parent != null) {\n                            String storedParentRid = null;\n                            String storedParentId = null;\n                            for (Vertex vertex : (Iterable<Vertex>) bfn.getVertices(Direction.IN, \"Own\")) {\n                                // we only expect one parent here.\n                                storedParentRid = vertex.getId().toString();\n                                storedParentId = vertex.getProperty(id);\n                            }\n                            if(parentRids.get(0).equals(storedParentRid)) {\n                                // same parent, do nothing\n                            } else {\n                                eventData.put(\"delParentId\", storedParentId);\n                                eventData.put(\"addParentId\", parent.getProperty(id));\n                            }\n                        } else {\n                            inputMap.put(\"error\", \"Parent with @rid \" + parentRids.get(0) + \" cannot be found\");\n                            inputMap.put(\"responseCode\", 404);\n                            return false;\n                        }\n                    }\n                    // make sure all children exist if there are any.\n                    // and make sure all children have empty parent.\n                    List<String> childrenRids = (List<String>)data.get(\"out_Own\");\n                    if(childrenRids != null && childrenRids.size() > 0) {\n                        List<String> childrenIds = new ArrayList<String>();\n                        Set<String> inputChildren = new HashSet<String>();\n                        for(String childRid: childrenRids) {\n                            if(parentRids != null && childRid.equals(parentRids.get(0))) {\n                                inputMap.put(\"error\", \"Parent shows up in the Children list\");\n                                inputMap.put(\"responseCode\", 400);\n                                return false;\n                            }\n                            if(childRid.equals(rid)) {\n                                inputMap.put(\"error\", \"Current object shows up in the Children list\");\n                                inputMap.put(\"responseCode\", 400);\n                                return false;\n                            }\n                            Vertex child = DbService.getVertexByRid(graph, childRid);\n                            if(child == null) {\n                                inputMap.put(\"error\", \"Child with @rid \" + childRid + \" cannot be found\");\n                                inputMap.put(\"responseCode\", 404);\n                                return false;\n                            } else {\n                                inputChildren.add((String)child.getProperty(id));\n                            }\n                        }\n                        Set<String> storedChildren = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) bfn.getVertices(Direction.OUT, \"Own\")) {\n                            storedChildren.add((String)vertex.getProperty(id));\n                        }\n\n                        Set<String> addChildren = new HashSet<String>(inputChildren);\n                        Set<String> delChildren = new HashSet<String>(storedChildren);\n                        addChildren.removeAll(storedChildren);\n                        delChildren.removeAll(inputChildren);\n\n                        if(addChildren.size() > 0) eventData.put(\"addChildren\", addChildren);\n                        if(delChildren.size() > 0) eventData.put(\"delChildren\", delChildren);\n                    }\n                } else {\n                    inputMap.put(\"error\",  \"@rid \" + rid + \" cannot be found\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return true;\n    }\n\n    public boolean updBfnEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updBfnDb(bfnType, data);\n        return true;\n    }\n\n    private OrientVertex getBfnByHostId(OrientGraph graph, String bfnType, String host, String id) {\n        OrientVertex bfn = null;\n        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(bfnType + \"HostIdIdx\");\n        OCompositeKey key = new OCompositeKey(host, id);\n        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n        if (oid != null) {\n            bfn = graph.getVertex(oid.getRecord());\n        }\n        return bfn;\n    }\n\n    protected void updBfnDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex bfn = getBfnByHostId(graph, bfnType, host, (String)data.get(id));\n            if (bfn != null) {\n                if(data.get(\"desc\") != null) {\n                    bfn.setProperty(\"desc\", data.get(\"desc\"));\n                } else {\n                    bfn.removeProperty(\"desc\");\n                }\n                if(data.get(\"attributes\") != null) {\n                    bfn.setProperty(\"attributes\", data.get(\"attributes\"));\n                } else {\n                    bfn.removeProperty(\"attributes\");\n                }\n                bfn.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // parent\n                String delParentId = (String)data.get(\"delParentId\");\n                if(delParentId != null) {\n                    for (Edge edge : (Iterable<Edge>) bfn.getEdges(Direction.IN, \"Own\")) {\n                        graph.removeEdge(edge);\n                    }\n                }\n                String addParentId = (String)data.get(\"addParentId\");\n                if(addParentId != null) {\n                    OrientVertex parent = getBfnByHostId(graph, bfnType, host, addParentId);\n                    if (parent != null) {\n                        parent.addEdge(\"Own\", bfn);\n                    }\n                }\n\n                // handle addChildren and delChildren\n                Set<String> addChildren = (Set)data.get(\"addChildren\");\n                if(addChildren != null) {\n                    for(String childId: addChildren) {\n                        OrientVertex vertex = getBfnByHostId(graph, bfnType, host, childId);\n                        bfn.addEdge(\"Own\", vertex);\n                    }\n                }\n                Set<String> delChildren = (Set)data.get(\"delChildren\");\n                if(delChildren != null) {\n                    for(String childId: delChildren) {\n                        OrientVertex vertex = getBfnByHostId(graph, bfnType, host, childId);\n                        for (Edge edge : (Iterable<Edge>) bfn.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(vertex)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                // updateUser\n                updateUser.addEdge(\"Update\", bfn);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean downBfn (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = bfnType + \"Id\";\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex bfn = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(bfn == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has down voted the bfn before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(bfn, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(bfn)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the \" + bfnType + \" already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(id, bfn.getProperty(id));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean downBfnEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downBfnDb(bfnType, data);\n        return true;\n    }\n\n    protected void downBfnDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex bfn = (OrientVertex)graph.getVertexByKey(index, data.get(id));\n            if(bfn != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(bfn, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(bfn)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", bfn);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean upBfn (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = bfnType + \"Id\";\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex bfn = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(bfn == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the bfn before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(bfn, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(bfn)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the \" + bfnType + \" already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(id, bfn.getProperty(id));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean upBfnEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upBfnDb(bfnType, data);\n        return true;\n    }\n\n    protected void upBfnDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex bfn = (OrientVertex)graph.getVertexByKey(index, data.get(id));\n            if(bfn != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(bfn, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(bfn)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", bfn);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean addPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String parentId = (String) data.get(\"parentId\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = getBfnByHostId(graph, bfnType, host, parentId);\n            if(parent == null) {\n                error = \"Id \" + parentId + \" doesn't exist on host \" + host;\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                eventData.put(\"postId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean addPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void addPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex post = graph.addVertex(\"class:Post\", data);\n            createUser.addEdge(\"Create\", post);\n            // parent\n            OrientVertex parent = getBfnByHostId(graph, bfnType, host, (String) data.get(\"parentId\"));\n            if(parent != null) {\n                parent.addEdge(\"HasPost\", post);\n            }\n            // tag\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            for(String tagId: inputTags) {\n                Vertex tag = null;\n                // get the tag is it exists\n                OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                logger.debug(\"tagHostIdIdx = \" + tagHostIdIdx);\n                OCompositeKey tagKey = new OCompositeKey(host, tagId);\n                logger.debug(\"tagKey =\" + tagKey);\n                OIdentifiable tagOid = (OIdentifiable) tagHostIdIdx.get(tagKey);\n                if (tagOid != null) {\n                    tag = graph.getVertex(tagOid.getRecord());\n                    post.addEdge(\"HasTag\", tag);\n                } else {\n                    tag = graph.addVertex(\"class:Tag\", \"host\", host, \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                    createUser.addEdge(\"Create\", tag);\n                    post.addEdge(\"HasTag\", tag);\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex post = DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"postId\", post.getProperty(\"postId\"));\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean delPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void delPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if(post != null) {\n                // TODO cascade deleting all comments belong to the post.\n                // Need to come up a query on that to get the entire tree.\n                /*\n                for (Vertex menuItem : graph.getVerticesOfClass(\"MenuItem\")) {\n                    if(host.equals(menuItem.getProperty(\"host\"))) {\n                        graph.removeVertex(menuItem);\n                    }\n                }\n                */\n                graph.removeVertex(post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // update post itself and we might have a new api to move post from one parent to another.\n            Vertex post = DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"postId\", post.getProperty(\"postId\"));\n                eventData.put(\"title\", data.get(\"title\"));\n                eventData.put(\"source\", data.get(\"source\"));\n                eventData.put(\"summary\", data.get(\"summary\"));\n                eventData.put(\"content\", data.get(\"content\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                // tags\n                Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n                Set<String> storedTags = new HashSet<String>();\n                for (Vertex vertex : (Iterable<Vertex>) post.getVertices(Direction.OUT, \"HasTag\")) {\n                    storedTags.add((String)vertex.getProperty(\"tagId\"));\n                }\n\n                Set<String> addTags = new HashSet<String>(inputTags);\n                Set<String> delTags = new HashSet<String>(storedTags);\n                addTags.removeAll(storedTags);\n                delTags.removeAll(inputTags);\n\n                if(addTags.size() > 0) eventData.put(\"addTags\", addTags);\n                if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean updPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void updPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if(post != null) {\n                updateUser.addEdge(\"Update\", post);\n                // fields\n                if(data.get(\"title\") != null) {\n                    post.setProperty(\"title\", data.get(\"title\"));\n                } else {\n                    post.removeProperty(\"name\");\n                }\n                if(data.get(\"source\") != null) {\n                    post.setProperty(\"source\", data.get(\"source\"));\n                } else {\n                    post.removeProperty(\"source\");\n                }\n                if(data.get(\"summary\") != null) {\n                    post.setProperty(\"summary\", data.get(\"summary\"));\n                } else {\n                    post.removeProperty(\"summary\");\n                }\n                if(data.get(\"content\") != null) {\n                    post.setProperty(\"content\", data.get(\"content\"));\n                } else {\n                    post.removeProperty(\"content\");\n                }\n                post.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // handle addTags and delTags\n                OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                Set<String> addTags = (Set)data.get(\"addTags\");\n                if(addTags != null) {\n                    for(String tagId: addTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex)oid.getRecord();\n                            post.addEdge(\"HasTag\", tag);\n                        } else {\n                            Vertex tag = graph.addVertex(\"class:Tag\", \"host\", data.get(\"host\"), \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                            updateUser.addEdge(\"Create\", tag);\n                            post.addEdge(\"HasTag\", tag);\n                        }\n                    }\n                }\n                Set<String> delTags = (Set)data.get(\"delTags\");\n                if(delTags != null) {\n                    for(String tagId: delTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex) oid.getRecord();\n                            for (Edge edge : (Iterable<Edge>) post.getEdges(Direction.OUT, \"HasTag\")) {\n                                if(edge.getVertex(Direction.IN).equals(tag)) graph.removeEdge(edge);\n                            }\n                        }\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getBfnTree(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String json = getBfnTree(bfnType, host);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No document can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getBfnTree(String bfnType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + bfnType + \" WHERE host = ? and in_Own IS NULL ORDER BY id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, \"rid,fetchPlan:out_Own.in_Create:-2 out_Own.out_Create:-2 out_Own:-1\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBfnPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        if(data.get(bfnType + \"Id\") == null || data.get(\"host\") == null) {\n            inputMap.put(\"error\", \"Host and Id are required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String posts = getBfnPostDb(bfnType, data);\n        if(posts != null) {\n            inputMap.put(\"result\", posts);\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getBfnPostDb(String bfnType, Map<String, Object> data) {\n        String json = null;\n        String sql = \"select from (traverse posts, out_HasPost from (select from \" + bfnType + \" where host = ? and \" + bfnType + \"Id = ?)) where @class = 'Post'\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> forums = graph.getRawGraph().command(query).execute(data.get(\"host\"), data.get(bfnType + \"Id\"));\n            if(forums.size() > 0) {\n                json = OJSONWriter.listToJSON(forums, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBfn(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        Object userHost = user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            inputMap.put(\"error\", \"You can only get \" + bfnType + \" from host: \" + host);\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        } else {\n            String docs = getBfnDb(bfnType, host);\n            if(docs != null) {\n                inputMap.put(\"result\", docs);\n                return true;\n            } else {\n                inputMap.put(\"error\", \"No document can be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n\n    protected String getBfnDb(String bfhType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + bfhType + \" WHERE host = ? ORDER BY createDate\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBfnDropdown (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String host = (String)data.get(\"host\");\n        if(payload == null) {\n            inputMap.put(\"error\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            String docs = getBfnDropdownDb(bfnType, host);\n            if(docs != null) {\n                inputMap.put(\"result\", docs);\n                return true;\n            } else {\n                inputMap.put(\"error\", \"No document can be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n\n    protected String getBfnDropdownDb(String bfnType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + bfnType + \" WHERE host = ? ORDER BY id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: docs) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    map.put(\"label\", (String)doc.field(bfnType + \"Id\"));\n                    map.put(\"value\", doc.field(\"@rid\").toString());\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.AbstractBfnRule",
      "createDate": "2015-03-08T18:18:18.586"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.586",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:22",
    "@version": 1,
    "@class": "Event",
    "eventId": 10023,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class DownPostRule extends AbstractPostRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpPostRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(post == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has down voted the post before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(post, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(post)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the post already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"postId\", post.getProperty(\"postId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.DownPostRule",
      "createDate": "2015-03-08T18:18:18.597"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.597",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:23",
    "@version": 1,
    "@class": "Event",
    "eventId": 10024,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic class GetPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetPostRule",
      "createDate": "2015-03-08T18:18:18.608"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.608",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:24",
    "@version": 1,
    "@class": "Event",
    "eventId": 10025,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic abstract class AbstractPostRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractPostRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void upVotePost(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex) graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if (post != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(post, Direction.OUT, \"DownVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(post)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downVotePost(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex) graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if (post != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(post, Direction.OUT, \"UpVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(post)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.AbstractPostRule",
      "createDate": "2015-03-08T18:18:18.634"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.634",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:25",
    "@version": 1,
    "@class": "Event",
    "eventId": 10026,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 06/12/14.\n */\npublic class GetRecentPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        if(data.get(\"host\") == null || data.get(\"limitTo\") == null) {\n            inputMap.put(\"error\", \"Host and limitTo are required\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        } else {\n\n            // get recent post for blog\n\n            // get recent post for news\n\n            // get recent post for forum\n\n        }\n\n\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetRecentPostRule",
      "createDate": "2015-03-08T18:18:18.663"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.663",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:26",
    "@version": 1,
    "@class": "Event",
    "eventId": 10027,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/12/14.\n */\npublic class GetPostTreeRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetPostTreeRule",
      "createDate": "2015-03-08T18:18:18.673"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.673",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:27",
    "@version": 1,
    "@class": "Event",
    "eventId": 10028,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class UpPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpPostEvRule",
      "createDate": "2015-03-08T18:18:18.684"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.684",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:28",
    "@version": 1,
    "@class": "Event",
    "eventId": 10029,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 02/12/14.\n */\npublic class getCommentRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.getCommentRule",
      "createDate": "2015-03-08T18:18:18.697"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.697",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:29",
    "@version": 1,
    "@class": "Event",
    "eventId": 10030,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class DownPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.DownPostEvRule",
      "createDate": "2015-03-08T18:18:18.716"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.716",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:30",
    "@version": 1,
    "@class": "Event",
    "eventId": 10031,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class UpPostRule extends AbstractPostRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpPostRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(post == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the post before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(post, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(post)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the post already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"postId\", post.getProperty(\"postId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpPostRule",
      "createDate": "2015-03-08T18:18:18.730"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.730",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:31",
    "@version": 1,
    "@class": "Event",
    "eventId": 10032,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpForumEvRule",
      "createDate": "2015-03-08T18:18:18.743"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.743",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:32",
    "@version": 1,
    "@class": "Event",
    "eventId": 10033,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class DelForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelForumEvRule",
      "createDate": "2015-03-08T18:18:18.755"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.755",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:33",
    "@version": 1,
    "@class": "Event",
    "eventId": 10034,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class GetForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumRule",
      "createDate": "2015-03-08T18:18:18.768"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.768",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:34",
    "@version": 1,
    "@class": "Event",
    "eventId": 10035,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class AddForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddForumEvRule",
      "createDate": "2015-03-08T18:18:18.784"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.784",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:35",
    "@version": 1,
    "@class": "Event",
    "eventId": 10036,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class AddForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddForumRule",
      "createDate": "2015-03-08T18:18:18.793"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.793",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:36",
    "@version": 1,
    "@class": "Event",
    "eventId": 10037,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DownForumRule",
      "createDate": "2015-03-08T18:18:18.807"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.807",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:37",
    "@version": 1,
    "@class": "Event",
    "eventId": 10038,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class DelForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelForumRule",
      "createDate": "2015-03-08T18:18:18.817"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.817",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:38",
    "@version": 1,
    "@class": "Event",
    "eventId": 10039,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 02/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddPostEvRule",
      "createDate": "2015-03-08T18:18:18.826"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.826",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:39",
    "@version": 1,
    "@class": "Event",
    "eventId": 10040,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpForumRule",
      "createDate": "2015-03-08T18:18:18.834"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.834",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:40",
    "@version": 1,
    "@class": "Event",
    "eventId": 10041,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class UpdForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdForumRule",
      "createDate": "2015-03-08T18:18:18.842"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.842",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:41",
    "@version": 1,
    "@class": "Event",
    "eventId": 10042,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DownForumEvRule",
      "createDate": "2015-03-08T18:18:18.850"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.850",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:42",
    "@version": 1,
    "@class": "Event",
    "eventId": 10043,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class UpdForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdForumEvRule",
      "createDate": "2015-03-08T18:18:18.859"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.859",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:43",
    "@version": 1,
    "@class": "Event",
    "eventId": 10044,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 02/12/14.\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddPostRule",
      "createDate": "2015-03-08T18:18:18.867"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.867",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:44",
    "@version": 1,
    "@class": "Event",
    "eventId": 10045,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class GetForumTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnTree(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumTreeRule",
      "createDate": "2015-03-08T18:18:18.877"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.877",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:45",
    "@version": 1,
    "@class": "Event",
    "eventId": 10046,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 01/12/14.\n */\npublic class GetForumPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumPostRule",
      "createDate": "2015-03-08T18:18:18.889"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.889",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:46",
    "@version": 1,
    "@class": "Event",
    "eventId": 10047,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class GetForumDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnDropdown(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumDropdownRule",
      "createDate": "2015-03-08T18:18:18.897"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.897",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:47",
    "@version": 1,
    "@class": "Event",
    "eventId": 10048,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic abstract class AbstractCommentRule extends AbstractRule implements Rule {\n\n    static final Logger logger = LoggerFactory.getLogger(AbstractCommentRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            String parentId = (String)data.remove(\"parentId\");\n            String parentClassName = (String)data.remove(\"parentClassName\");\n            Vertex parent = null;\n            if(\"Post\".equals(parentClassName)) {\n                parent = graph.getVertexByKey(\"Post.postId\", parentId);\n            } else {\n                parent = graph.getVertexByKey(\"Comment.commentId\", parentId);\n            }\n            OrientVertex comment = graph.addVertex(\"class:Comment\", data);\n            createUser.addEdge(\"Create\", comment);\n            parent.addEdge(\"Own\", comment);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected long getTotal(Map<String, Object> data, Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sb = new StringBuilder(\"SELECT COUNT(*) as count FROM (TRAVERSE children FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        System.out.println(\"sql=\" + sb);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            total = ((ODocument)graph.getRawGraph().query(new OSQLSynchQuery<ODocument>(sb.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return total;\n    }\n\n    protected String getComment(Map<String, Object> data, Map<String, Object> criteria) {\n        String json = null;\n        StringBuilder sb = new StringBuilder(\"SELECT FROM (TRAVERSE children FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sb.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sb.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sb.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sb.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sb);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sb.toString());\n            List<ODocument> list = graph.getRawGraph().command(query).execute();\n            if(list.size() > 0) {\n                json = OJSONWriter.listToJSON(list, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getCommentTree(Map<String, Object> data) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            json = graph.getVertex(data.get(\"@rid\")).getRecord().toJSON(\"rid,fetchPlan:out_Own:-1\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AbstractCommentRule",
      "createDate": "2015-03-08T18:18:18.918"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.918",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:48",
    "@version": 1,
    "@class": "Event",
    "eventId": 10049,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class AddCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentEvRule",
      "createDate": "2015-03-08T18:18:18.930"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.930",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:49",
    "@version": 1,
    "@class": "Event",
    "eventId": 10050,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class GetCommentRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"@class\", \"Comment\");\n        long total = getTotal(data, criteria);\n        if(total > 0) {\n            String json = getComment(data, criteria);\n            List<Map<String, Object>> comments\n                    = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"comments\", comments);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No user can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.GetCommentRule",
      "createDate": "2015-03-08T18:18:18.946"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.946",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:50",
    "@version": 1,
    "@class": "Event",
    "eventId": 10051,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class AddCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AddCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String parentRid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = (OrientVertex)DbService.getVertexByRid(graph, parentRid);\n            if(parent == null ) {\n                error = \"Parent @rid \" + parentRid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"comment\", data.get(\"comment\"));\n                String parentClassName = parent.getProperty(\"@class\");\n                eventData.put(\"parentClassName\", parentClassName); // parent can be a post or a comment\n                if(\"Post\".equals(parentClassName)) {\n                    eventData.put(\"parentId\", parent.getProperty(\"postId\"));\n                } else {\n                    eventData.put(\"parentId\", parent.getProperty(\"commentId\"));\n                }\n                // generate unique identifier\n                eventData.put(\"commentId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentRule",
      "createDate": "2015-03-08T18:18:18.959"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.959",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:51",
    "@version": 1,
    "@class": "Event",
    "eventId": 10052,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class GetCommentTreeRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String comments = getCommentTree(data);\n        if(comments != null) {\n            inputMap.put(\"result\", comments);\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No comment can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.GetCommentTreeRule",
      "createDate": "2015-03-08T18:18:18.970"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.970",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:52",
    "@version": 1,
    "@class": "Event",
    "eventId": 10053,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBfnEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpNewsEvRule",
      "createDate": "2015-03-08T18:18:18.981"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.981",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:53",
    "@version": 1,
    "@class": "Event",
    "eventId": 10054,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class DelNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelNewsRule",
      "createDate": "2015-03-08T18:18:18.990"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.990",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:54",
    "@version": 1,
    "@class": "Event",
    "eventId": 10055,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetNewsTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnTree(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsTreeRule",
      "createDate": "2015-03-08T18:18:18.998"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:18.998",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:55",
    "@version": 1,
    "@class": "Event",
    "eventId": 10056,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DownNewsRule",
      "createDate": "2015-03-08T18:18:19.015"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.015",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:56",
    "@version": 1,
    "@class": "Event",
    "eventId": 10057,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfnEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddNewsEvRule",
      "createDate": "2015-03-08T18:18:19.029"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.029",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:57",
    "@version": 1,
    "@class": "Event",
    "eventId": 10058,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class UpdNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfnEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdNewsEvRule",
      "createDate": "2015-03-08T18:18:19.039"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.039",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:58",
    "@version": 1,
    "@class": "Event",
    "eventId": 10059,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetNewsDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnDropdown(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsDropdownRule",
      "createDate": "2015-03-08T18:18:19.063"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.063",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:59",
    "@version": 1,
    "@class": "Event",
    "eventId": 10060,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsRule",
      "createDate": "2015-03-08T18:18:19.071"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.071",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:60",
    "@version": 1,
    "@class": "Event",
    "eventId": 10061,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class DelNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelNewsEvRule",
      "createDate": "2015-03-08T18:18:19.081"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.081",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:61",
    "@version": 1,
    "@class": "Event",
    "eventId": 10062,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DownNewsEvRule",
      "createDate": "2015-03-08T18:18:19.095"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.095",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:62",
    "@version": 1,
    "@class": "Event",
    "eventId": 10063,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddNewsRule",
      "createDate": "2015-03-08T18:18:19.105"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.105",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:63",
    "@version": 1,
    "@class": "Event",
    "eventId": 10064,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddPostEvRule",
      "createDate": "2015-03-08T18:18:19.119"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.119",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:64",
    "@version": 1,
    "@class": "Event",
    "eventId": 10065,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetNewsPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsPostRule",
      "createDate": "2015-03-08T18:18:19.128"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.128",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:65",
    "@version": 1,
    "@class": "Event",
    "eventId": 10066,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddPostRule",
      "createDate": "2015-03-08T18:18:19.138"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.138",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:66",
    "@version": 1,
    "@class": "Event",
    "eventId": 10067,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpNewsRule",
      "createDate": "2015-03-08T18:18:19.149"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.149",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:67",
    "@version": 1,
    "@class": "Event",
    "eventId": 10068,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class UpdNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdNewsRule",
      "createDate": "2015-03-08T18:18:19.158"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-08T18:18:19.158",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  }
]
